{"version":3,"file":"playlist-D2ds42V2.js","sources":["../../node_modules/@srgssr/pillarbox-playlist/dist/pillarbox-playlist.js","../../node_modules/@srgssr/pillarbox-playlist/dist/ui/pillarbox-playlist-ui.js","../../static/showcases/playlist.html?html-proxy&index=0.js","../../static/showcases/playlist.html?html-proxy&index=1.js"],"sourcesContent":["import videojs from 'video.js';\n\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\n\nconst version = \"2.1.0\";\n\n/**\n * @ignore\n * @type {typeof import('video.js/dist/types/plugin').default}\n */\nconst Plugin = videojs.getPlugin('plugin');\nconst log = videojs.log.createLogger('pillarbox-playlist');\n\n/**\n * Defines the available repeat modes for the playlist.\n *\n * @enum {number}\n */\nconst RepeatMode = {\n  /**\n   * Disables repeat mode.\n   */\n  NO_REPEAT: 0,\n  /**\n   * Loops the entire playlist. Once the last element of the playlist ends the n\n   * ext element will be the first one. This mode only works forwards,\n   * i.e. when advancing to the next element.\n   */\n  REPEAT_ALL: 1,\n  /**\n   * Loops the currently playing item in the playlist.\n   */\n  REPEAT_ONE: 2\n};\n\n/**\n * Represents a Plugin that allows control over a playlist.\n */\nclass PillarboxPlaylist extends Plugin {\n  /**\n   * Toggles the repeat mode of the player to the opposite of its current state.\n   *\n   * @param {RepeatMode} [force] Optional.\n   *        If provided, sets the repeat mode to the specified state.\n   *        If omitted, the repeat mode will cycle in order through: no repeat, repeat all and repeat one.\n   */\n  toggleRepeat(force = undefined) {\n    this.repeat = force !== null && force !== void 0 ? force : (this.repeat + 1) % Object.keys(RepeatMode).length;\n  }\n\n  /**\n   * Checks if the repeat mode is set to {@link RepeatMode.REPEAT_ONE}.\n   *\n   * @returns {boolean} True if the repeat mode is {@link RepeatMode.REPEAT_ONE}, false otherwise.\n   */\n  isRepeatOneMode() {\n    return this.repeat === RepeatMode.REPEAT_ONE;\n  }\n\n  /**\n   * Checks if the repeat mode is set to {@link RepeatMode.REPEAT_ALL}.\n   *\n   * @returns {boolean} True if the repeat mode is {@link RepeatMode.REPEAT_ALL}, false otherwise.\n   */\n  isRepeatAllMode() {\n    return this.repeat === RepeatMode.REPEAT_ALL;\n  }\n\n  /**\n   * Checks if the repeat mode is set to {@link RepeatMode.NO_REPEAT}.\n   *\n   * @returns {boolean} True if the repeat mode is {@link RepeatMode.NO_REPEAT}, false otherwise.\n   */\n  isNoRepeatMode() {\n    return this.repeat === RepeatMode.NO_REPEAT;\n  }\n\n  /**\n   * Whether auto-advance is enabled or not.\n   *\n   * @type boolean\n   */\n\n  /**\n   * Toggles the auto-advance mode of the player to the opposite of its current state.\n   *\n   * @param {boolean} [force] Optional. If provided, sets the auto-advance mode to the specified boolean value (true or false).\n   *                          If omitted, the auto-advance mode will toggle to the opposite of its current state.\n   */\n  toggleAutoadvance(force = undefined) {\n    this.autoadvance = force !== null && force !== void 0 ? force : !this.autoadvance;\n  }\n\n  /**\n   * Handles the 'ended' event when triggered. This method serves as a proxy to\n   * the main `ended` handler, ensuring that additional logic can be executed or\n   * making it easier to detach the event listener later.\n   *\n   * @private\n   */\n\n  /**\n   * Creates an instance of a pillarbox playlist.\n   *\n   * @param {import('video.js/dist/types/player.js').default} player - The player instance.\n   * @param {Object} options - Configuration options for the plugin.\n   * @param {Array} [options.playlist=[]] - An array of playlist items to be initially loaded into the player.\n   * @param {Boolean} [options.repeat=false] - If true, the playlist will start over automatically after the last item ends.\n   * @param {Boolean} [options.autoadvance=false] - If enabled, the player will automatically move to the next item after the current one ends.\n   * @param {Number} [options.previousNavigationThreshold=3] - Threshold in seconds for determining the behavior when navigating to the previous item.\n   */\n  constructor(player, options) {\n    var _options$repeat;\n    super(player);\n    /**\n     * The items in the playlist.\n     *\n     * @type {PlaylistItem[]}\n     * @private\n     */\n    _defineProperty(this, \"items_\", []);\n    /**\n     * The current index.\n     *\n     * @type {number}\n     * @private\n     */\n    _defineProperty(this, \"currentIndex_\", -1);\n    /**\n     * Threshold in seconds for determining the behavior when navigating to the previous item.\n     *\n     * - If the media is live, {@link previous} will navigate to the previous item,\n     *   regardless of the threshold.\n     * - If the playback position is within this threshold, {@link previous} will\n     *   navigate to the previous item.\n     * - If the playback position is beyond this threshold, {@link previous} will\n     *   restart the current media.\n     *\n     * To disable this functionality, set the value to undefined or infinity.\n     *\n     * @type {number}\n     * @default 3\n     */\n    _defineProperty(this, \"previousNavigationThreshold\", 3);\n    /**\n     * The current repeat mode of the player. By default, repeat is disabled.\n     *\n     * @type {RepeatMode}\n     */\n    _defineProperty(this, \"repeat\", RepeatMode.NO_REPEAT);\n    _defineProperty(this, \"autoadvance\", false);\n    _defineProperty(this, \"onEnded_\", () => this.handleEnded());\n    options = this.options_ = videojs.obj.merge(this.options_, options);\n    if (options.playlist && options.playlist.length) {\n      player.ready(() => {\n        this.load(...options.playlist);\n      });\n    }\n    this.autoadvance = Boolean(options.autoadvance);\n    this.repeat = (_options$repeat = options.repeat) !== null && _options$repeat !== void 0 ? _options$repeat : this.repeat;\n    this.previousNavigationThreshold = Number.isFinite(options.previousNavigationThreshold) ? options.previousNavigationThreshold : this.previousNavigationThreshold;\n    this.player.on('ended', this.onEnded_);\n  }\n  dispose() {\n    this.player.off('ended', this.onEnded_);\n  }\n\n  /**\n   * Loads a playlist into the player. This method will load the first element\n   * in the playlist. Use it to initialize the playlist.\n   *\n   * Note: A copy of the playlist items array is made internally to ensure that\n   * external modifications to the array do not affect the internal state and\n   * vice versa.\n   *\n   * @param {PlaylistItem[]} items The playlist items to load.\n   */\n  load(items) {\n    this.items_ = [...items];\n    this.select(0);\n  }\n\n  /**\n   * Adds one or more items at the end of the playlist. This method will not\n   * load any of the elements. Use it to add items while the playlist is\n   * running.\n   *\n   * @param {...PlaylistItem} items the items to add to the playlist.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\n   */\n  push(...items) {\n    this.items_.push(...items);\n    this.updateState_();\n  }\n\n  /**\n   * Modifies the contents of the playlist by removing or replacing existing\n   * elements and/or adding new elements.\n   *\n   * The method also adjusts currentIndex accordingly if items are added or\n   * removed in such a way that it affects the currentIndex.\n   *\n   * If the current item is deleted then the currentIndex becomes -1, the\n   * current element will continue playing but the next element will be the\n   * first element in the playlist.\n   *\n   * @param {number} start The zero-based location in the array from which to\n   *                       start removing elements.\n   * @param {number} deleteCount The number of elements to remove.\n   * @param {...PlaylistItem} items The items to add to the playlist.\n   *\n   * @return {PlaylistItem[]} An array containing the deleted elements.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\n   */\n  splice(start, deleteCount, ...items) {\n    const itemsAddedCount = items.length;\n    const deletedElements = this.items_.splice(start, deleteCount, ...items);\n    const deletedElementsCount = deletedElements.length;\n    if (this.currentIndex_ >= start && this.currentIndex_ < start + deletedElementsCount) {\n      // Current item was removed, set currentIndex to -1\n      this.currentIndex_ = -1;\n    } else if (this.currentIndex_ >= start) {\n      // Adjust currentIndex based on the net items added/removed\n      this.currentIndex_ = this.currentIndex_ - deletedElementsCount + itemsAddedCount;\n    }\n    this.updateState_();\n    return deletedElements;\n  }\n\n  /**\n   * Clears the internal playlist. This method empties the playlist and resets\n   * the current index to -1.\n   *\n   * Note that this method does not stop the currently playing media or unload it.\n   */\n  clear() {\n    this.items_ = [];\n    this.currentIndex_ = -1;\n    this.updateState_();\n  }\n\n  /**\n   * Reverses the order of the items in the playlist and updates the current index to reflect\n   * the new position of the previously current item after reversal.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\n   */\n  reverse() {\n    if (!this.items_.length) return;\n    this.items_.reverse();\n    this.currentIndex_ = this.items_.length - 1 - this.currentIndex_;\n    this.updateState_();\n  }\n\n  /**\n   * Sorts the items in the playlist using the provided compare function and updates the current\n   * index to reflect the new position of the previously current item after sorting.\n   *\n   * @method sort\n   * @param {Function} compareFn - A function that defines the sort order.\n   *        The return value should be a number whose sign indicates the relative order\n   *        of the two elements: negative if a is less than b, positive if a is\n   *        greater than b, and zero if they are equal. NaN is treated as 0. If omitted,\n   *        the array elements are converted to strings, then sorted according to each\n   *        character's Unicode code point value.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n   */\n  sort(compareFn) {\n    if (!this.items_.length) return;\n    const currentItem = this.currentItem;\n    this.items_.sort(compareFn);\n    this.currentIndex_ = this.items_.indexOf(currentItem);\n    this.updateState_();\n  }\n\n  /**\n   * Get the currently playing index.\n   *\n   * @returns {number} the currently playing index.\n   */\n  get currentIndex() {\n    return this.currentIndex_;\n  }\n\n  /**\n   * Get the currently playing item.\n   *\n   * @returns {PlaylistItem} the currently playing item.\n   */\n  get currentItem() {\n    return this.items_[this.currentIndex_];\n  }\n\n  /**\n   * Get the current playlist items.This is a copy of the internal list\n   * modifying this list will not affect the playlist. use `push` and `splice`\n   * to modify the internal list.\n   *\n   * @returns {PlaylistItem[]} the current list of items.\n   */\n  get items() {\n    return [...this.items_];\n  }\n\n  /**\n   * Plays the playlist item at the given index. If the index is not in\n   * the playlist this method has no effect.\n   *\n   * @param {number} index The index of the item to play.\n   */\n  // eslint-disable-next-line max-statements\n  select(index) {\n    if (index < 0 || index >= this.items_.length) {\n      log.warn(`Index: ${index} is out of bounds (The current playlist has ${this.items_.length} elements)`);\n      return;\n    }\n    if (index === this.currentIndex_) {\n      log.warn(`Index: ${index} is already selected`);\n      return;\n    }\n    const item = this.items_[index];\n    this.player.src(item.sources);\n    this.player.poster(item.poster);\n    this.currentIndex_ = index;\n    this.updateState_();\n  }\n\n  /**\n   * Advances to the next item in the playlist. If {@link RepeatMode#REPEAT_ALL}\n   * mode is enabled, then once the last item of the playlist is reached this\n   * function will play the first one.\n   */\n  next() {\n    if (this.hasNext()) {\n      this.select(this.currentIndex_ + 1);\n      return;\n    }\n    if (this.repeat === RepeatMode.REPEAT_ALL) this.select(0);\n  }\n\n  /**\n   * Whether an element exists in the playlist after the one that is currently playing.\n   * If `repeat` mode is enabled this function will still return `false` when the\n   * current position is the last item in the playlist.\n   *\n   * @returns {boolean} true if there is an element after, false otherwise.\n   */\n  hasNext() {\n    return this.currentIndex_ + 1 < this.items_.length;\n  }\n\n  /**\n   * Navigates to the previous item in the playlist or restarts the current\n   * media based on playback position.\n   *\n   * - If the media is live, navigates to the previous item regardless of the threshold.\n   * - If playback is beyond the threshold, restarts the current media.\n   * - If playback is within the threshold, navigates to the previous item.\n   * - If {@link RepeatMode#REPEAT_ALL} mode is enabled, then once the first\n   *   item of the playlist is reached this function will play the last one.\n   *\n   * @see previousNavigationThreshold\n   */\n  previous() {\n    if (!this.isLive() && this.player.currentTime() > this.previousNavigationThreshold) {\n      this.player.currentTime(0);\n      return;\n    }\n    if (this.hasPrevious()) {\n      this.select(this.currentIndex_ - 1);\n      return;\n    }\n    if (this.repeat === RepeatMode.REPEAT_ALL) {\n      this.select(this.items_.length - 1);\n    }\n  }\n  isLive() {\n    const liveTracker = this.player.liveTracker;\n    return liveTracker && liveTracker.isLive();\n  }\n\n  /**\n   * Whether an element exists before the one that is currently playing.\n   * If `repeat` mode is enabled this function will still return `false` when the\n   * current position is the first item in the playlist.\n   *\n   * @returns {boolean} true if there is an element before, false otherwise.\n   */\n  hasPrevious() {\n    return this.currentIndex_ > 0;\n  }\n\n  /**\n   * Handles the `ended` event. If auto-advance is enabled then the next item\n   * will be played, otherwise nothing happens.\n   */\n  handleEnded() {\n    if (this.repeat === RepeatMode.REPEAT_ONE) {\n      this.player.play().then(() => {});\n      return;\n    }\n    if (!this.autoadvance) {\n      return;\n    }\n    this.next();\n  }\n\n  /**\n   * Shuffles the order of the items in the playlist randomly.\n   * This method implements the Fisher-Yates shuffle algorithm to\n   * ensure each permutation of the array elements is equally likely.\n   */\n  shuffle() {\n    for (let i = this.items_.length - 1; i > 0; i -= 1) {\n      // Pick a remaining element…\n      const j = Math.floor(Math.random() * (i + 1));\n\n      // And swap it with the current element.\n      [this.items_[i], this.items_[j]] = [this.items_[j], this.items_[i]];\n\n      // Check if the currentIndex was swapped, update if necessary\n      if (this.currentIndex_ === i) {\n        this.currentIndex_ = j;\n      } else if (this.currentIndex_ === j) {\n        this.currentIndex_ = i;\n      }\n    }\n    this.updateState_();\n  }\n\n  /**\n   * Updates the component's state with the current items and index.\n   *\n   * @private\n   */\n  updateState_() {\n    this.setState({\n      // Converts the items array to a JSON string before setting it in the state.\n      // Otherwise, the change is not detected.\n      items: JSON.stringify(this.items_),\n      currentIndex: this.currentIndex_\n    });\n  }\n  static get VERSION() {\n    return version;\n  }\n}\nPillarboxPlaylist.prototype.options_ = {\n  autoadvance: false,\n  repeat: false\n};\nvideojs.registerPlugin('pillarboxPlaylist', PillarboxPlaylist);\n\n/**\n * Represents a single item in the playlist.\n *\n * @typedef {Object} PlaylistItem\n * @property {any[]} sources The array of media sources for the playlist item.\n * @property {string} poster A url for the poster.\n * @property {Object} data The metadata for the playlist item. In this object\n *                          you can store properties related to the playlist\n *                          item such as `title`, the `duration`,\n *                          and other relevant metadata.\n */\n\nexport { PillarboxPlaylist, RepeatMode };\n//# sourceMappingURL=pillarbox-playlist.js.map\n","import videojs from 'video.js';\n\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\n\n/**\n * @ignore\n * @type {typeof import('video.js/dist/types/button').default}\n */\nconst Button$5 = videojs.getComponent('Button');\n\n/**\n * Class representing a button that opens the playlist menu.\n */\nclass PillarboxPlaylistButton extends Button$5 {\n  /**\n   * Creates an instance of PillarboxPlaylistButton.\n   *\n   * @param {Object} player - The video.js player instance.\n   * @param {Object} options - Options for the button.\n   */\n  constructor(player, options) {\n    options = videojs.mergeOptions({\n      controlText: 'Playlist'\n    }, options);\n    super(player, options);\n    /**\n     * Handles the 'statechanged' event when triggered by the playlist. This method\n     * serves as a proxy to the main `statechanged` handler, ensuring that additional\n     * logic can be executed or making it easier to detach the event listener later.\n     *\n     * @private\n     */\n    _defineProperty(this, \"onPlaylistStateChanged_\", ({\n      changes\n    }) => {\n      if ('items' in changes) {\n        this.toggleVisibility();\n      }\n    });\n    this.setIcon('chapters');\n    this.playlist().on('statechanged', this.onPlaylistStateChanged_);\n  }\n\n  /**\n   * Get the playlist instance associated with the player.\n   *\n   * @returns {import('packages/pillarbox-playlist/src/pillarbox-playlist.js').default} The playlist instance.\n   */\n  playlist() {\n    return this.player().pillarboxPlaylist();\n  }\n  ready() {\n    this.$('.vjs-icon-placeholder').classList.toggle('vjs-icon-chapters', true);\n  }\n\n  /**\n   * Dispose of the PillarboxPlaylistButton instance.\n   */\n  dispose() {\n    this.playlist().off('statechanged', this.onPlaylistStateChanged_);\n    super.dispose();\n  }\n\n  /**\n   * Builds the CSS class string for the button.\n   *\n   * @returns {string} The CSS class string.\n   */\n  buildCSSClass() {\n    return `pbw-playlist-button vjs-hidden ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * Handles the click event on the button.\n   *\n   * @param {Event} event - The click event.\n   */\n  handleClick(event) {\n    super.handleClick(event);\n    this.player().getChild('PillarboxPlaylistMenuDialog').open();\n  }\n\n  /**\n   * Toggles the visibility of the element based on the presence of items in the playlist.\n   */\n  toggleVisibility() {\n    if (this.playlist().items.length > 0) {\n      this.show();\n      return;\n    }\n    this.hide();\n  }\n}\nvideojs.registerComponent('PillarboxPlaylistButton', PillarboxPlaylistButton);\n\n/**\n * @ignore\n * @type {typeof import('video.js/dist/types/button').default}\n */\nconst Button$4 = videojs.getComponent('Button');\n\n/**\n * Class representing a playlist menu item in the Pillarbox plugin.\n */\nlet PillarboxPlaylistMenuItem$1 = class PillarboxPlaylistMenuItem extends Button$4 {\n  /**\n   * Creates an instance of PillarboxPlaylistMenuItem.\n   * @param {Object} player - The video.js player instance.\n   * @param {Object} options - Options for the menu item.\n   * @param {number} options.index - The index of the playlist item.\n   * @param {Object} options.item - The playlist item data.\n   * @param {Object} options.item.data - The data for the playlist item.\n   * @param {string} options.item.data.title - The title of the playlist item.\n   * @param {number} options.item.data.duration - The duration of the playlist item.\n   */\n  constructor(player, options) {\n    var _this$options_$item$d, _this$options_$item$d2;\n    super(player, options);\n    this.selected(options.index === this.playlist().currentIndex);\n    this.controlText(`${(_this$options_$item$d = this.options_.item.data) === null || _this$options_$item$d === void 0 ? void 0 : _this$options_$item$d.title} - ${videojs.formatTime((_this$options_$item$d2 = this.options_.item.data) === null || _this$options_$item$d2 === void 0 ? void 0 : _this$options_$item$d2.duration)}`);\n  }\n\n  /**\n   * Gets the Pillarbox playlist associated with the player.\n   *\n   * @returns {import('/packages/pillarbox-playlist/src/pillarbox-playlist.js').default} The Pillarbox playlist.\n   */\n  playlist() {\n    return this.player().pillarboxPlaylist();\n  }\n\n  /**\n   * Handles the click event on the menu item.\n   *\n   * @param {Event} event - The click event.\n   */\n  handleClick(event) {\n    super.handleClick(event);\n    this.playlist().select(this.options_.index);\n  }\n\n  /**\n   * Sets the selected state of the menu item.\n   *\n   * @param {boolean} selected - Whether the menu item is selected.\n   */\n  selected(selected) {\n    this.toggleClass('vjs-selected', selected);\n  }\n\n  /**\n   * Builds the CSS class string for the menu item.\n   *\n   * @returns {string} The CSS class string.\n   */\n  buildCSSClass() {\n    return `pbw-playlist-item-button vjs-visible-text ${super.buildCSSClass()}`;\n  }\n};\nvideojs.registerComponent('PillarboxPlaylistMenuItem', PillarboxPlaylistMenuItem$1);\n\n/**\n * @ignore\n * @type {typeof import('video.js/dist/types/button').default}\n */\nconst Button$3 = videojs.getComponent('Button');\n\n/**\n * The next item button for the playlist ui. When clicked moves to the\n * next item in the playlist.\n */\nclass PillarboxPlaylistNextItemButton extends Button$3 {\n  constructor(player, options) {\n    options = videojs.mergeOptions({\n      controlText: 'Next Item'\n    }, options);\n    super(player, options);\n    this.setIcon('next-item');\n  }\n\n  /**\n   * Get the playlist instance associated with the player.\n   *\n   * @returns {import('packages/pillarbox-playlist/src/pillarbox-playlist.js').default} The playlist instance.\n   */\n  playlist() {\n    return this.player().pillarboxPlaylist();\n  }\n  ready() {\n    this.$('.vjs-icon-placeholder').classList.toggle(`vjs-icon-next-item`, true);\n  }\n\n  /**\n   * Handles the click event on the button.\n   *\n   * @param {Event} event - The click event.\n   */\n  handleClick(event) {\n    super.handleClick(event);\n    this.playlist().next();\n  }\n}\nvideojs.registerComponent('PillarboxPlaylistNextItemButton', PillarboxPlaylistNextItemButton);\n\n/**\n * @ignore\n * @type {typeof import('video.js/dist/types/button').default}\n */\nconst Button$2 = videojs.getComponent('Button');\n\n/**\n * The previous item button for the playlist ui. When clicked moves to the\n * previous item in the playlist.\n */\nclass PillarboxPlaylistPreviousItemButton extends Button$2 {\n  constructor(player, options) {\n    options = videojs.mergeOptions({\n      controlText: 'Previous Item'\n    }, options);\n    super(player, options);\n    this.setIcon('previous-item');\n  }\n\n  /**\n   * Get the playlist instance associated with the player.\n   *\n   * @returns {import('packages/pillarbox-playlist/src/pillarbox-playlist.js').default} The playlist instance.\n   */\n  playlist() {\n    return this.player().pillarboxPlaylist();\n  }\n  ready() {\n    this.$('.vjs-icon-placeholder').classList.toggle(`vjs-icon-previous-item`, true);\n  }\n\n  /**\n   * Handles the click event on the button.\n   *\n   * @param {Event} event - The click event.\n   */\n  handleClick(event) {\n    super.handleClick(event);\n    this.playlist().previous();\n  }\n}\nvideojs.registerComponent('PillarboxPlaylistPreviousItemButton', PillarboxPlaylistPreviousItemButton);\n\nconst version = \"2.1.0\";\n\n/**\n * @ignore\n * @type {typeof import('video.js/dist/types/plugin').default}\n */\nconst Plugin$1 = videojs.getPlugin('plugin');\nconst log$1 = videojs.log.createLogger('pillarbox-playlist');\n\n/**\n * Defines the available repeat modes for the playlist.\n *\n * @enum {number}\n */\nconst RepeatMode = {\n  /**\n   * Disables repeat mode.\n   */\n  NO_REPEAT: 0,\n  /**\n   * Loops the entire playlist. Once the last element of the playlist ends the n\n   * ext element will be the first one. This mode only works forwards,\n   * i.e. when advancing to the next element.\n   */\n  REPEAT_ALL: 1,\n  /**\n   * Loops the currently playing item in the playlist.\n   */\n  REPEAT_ONE: 2\n};\n\n/**\n * Represents a Plugin that allows control over a playlist.\n */\nclass PillarboxPlaylist extends Plugin$1 {\n  /**\n   * Toggles the repeat mode of the player to the opposite of its current state.\n   *\n   * @param {RepeatMode} [force] Optional.\n   *        If provided, sets the repeat mode to the specified state.\n   *        If omitted, the repeat mode will cycle in order through: no repeat, repeat all and repeat one.\n   */\n  toggleRepeat(force = undefined) {\n    this.repeat = force !== null && force !== void 0 ? force : (this.repeat + 1) % Object.keys(RepeatMode).length;\n  }\n\n  /**\n   * Checks if the repeat mode is set to {@link RepeatMode.REPEAT_ONE}.\n   *\n   * @returns {boolean} True if the repeat mode is {@link RepeatMode.REPEAT_ONE}, false otherwise.\n   */\n  isRepeatOneMode() {\n    return this.repeat === RepeatMode.REPEAT_ONE;\n  }\n\n  /**\n   * Checks if the repeat mode is set to {@link RepeatMode.REPEAT_ALL}.\n   *\n   * @returns {boolean} True if the repeat mode is {@link RepeatMode.REPEAT_ALL}, false otherwise.\n   */\n  isRepeatAllMode() {\n    return this.repeat === RepeatMode.REPEAT_ALL;\n  }\n\n  /**\n   * Checks if the repeat mode is set to {@link RepeatMode.NO_REPEAT}.\n   *\n   * @returns {boolean} True if the repeat mode is {@link RepeatMode.NO_REPEAT}, false otherwise.\n   */\n  isNoRepeatMode() {\n    return this.repeat === RepeatMode.NO_REPEAT;\n  }\n\n  /**\n   * Whether auto-advance is enabled or not.\n   *\n   * @type boolean\n   */\n\n  /**\n   * Toggles the auto-advance mode of the player to the opposite of its current state.\n   *\n   * @param {boolean} [force] Optional. If provided, sets the auto-advance mode to the specified boolean value (true or false).\n   *                          If omitted, the auto-advance mode will toggle to the opposite of its current state.\n   */\n  toggleAutoadvance(force = undefined) {\n    this.autoadvance = force !== null && force !== void 0 ? force : !this.autoadvance;\n  }\n\n  /**\n   * Handles the 'ended' event when triggered. This method serves as a proxy to\n   * the main `ended` handler, ensuring that additional logic can be executed or\n   * making it easier to detach the event listener later.\n   *\n   * @private\n   */\n\n  /**\n   * Creates an instance of a pillarbox playlist.\n   *\n   * @param {import('video.js/dist/types/player.js').default} player - The player instance.\n   * @param {Object} options - Configuration options for the plugin.\n   * @param {Array} [options.playlist=[]] - An array of playlist items to be initially loaded into the player.\n   * @param {Boolean} [options.repeat=false] - If true, the playlist will start over automatically after the last item ends.\n   * @param {Boolean} [options.autoadvance=false] - If enabled, the player will automatically move to the next item after the current one ends.\n   * @param {Number} [options.previousNavigationThreshold=3] - Threshold in seconds for determining the behavior when navigating to the previous item.\n   */\n  constructor(player, options) {\n    var _options$repeat;\n    super(player);\n    /**\n     * The items in the playlist.\n     *\n     * @type {PlaylistItem[]}\n     * @private\n     */\n    _defineProperty(this, \"items_\", []);\n    /**\n     * The current index.\n     *\n     * @type {number}\n     * @private\n     */\n    _defineProperty(this, \"currentIndex_\", -1);\n    /**\n     * Threshold in seconds for determining the behavior when navigating to the previous item.\n     *\n     * - If the media is live, {@link previous} will navigate to the previous item,\n     *   regardless of the threshold.\n     * - If the playback position is within this threshold, {@link previous} will\n     *   navigate to the previous item.\n     * - If the playback position is beyond this threshold, {@link previous} will\n     *   restart the current media.\n     *\n     * To disable this functionality, set the value to undefined or infinity.\n     *\n     * @type {number}\n     * @default 3\n     */\n    _defineProperty(this, \"previousNavigationThreshold\", 3);\n    /**\n     * The current repeat mode of the player. By default, repeat is disabled.\n     *\n     * @type {RepeatMode}\n     */\n    _defineProperty(this, \"repeat\", RepeatMode.NO_REPEAT);\n    _defineProperty(this, \"autoadvance\", false);\n    _defineProperty(this, \"onEnded_\", () => this.handleEnded());\n    options = this.options_ = videojs.obj.merge(this.options_, options);\n    if (options.playlist && options.playlist.length) {\n      player.ready(() => {\n        this.load(...options.playlist);\n      });\n    }\n    this.autoadvance = Boolean(options.autoadvance);\n    this.repeat = (_options$repeat = options.repeat) !== null && _options$repeat !== void 0 ? _options$repeat : this.repeat;\n    this.previousNavigationThreshold = Number.isFinite(options.previousNavigationThreshold) ? options.previousNavigationThreshold : this.previousNavigationThreshold;\n    this.player.on('ended', this.onEnded_);\n  }\n  dispose() {\n    this.player.off('ended', this.onEnded_);\n  }\n\n  /**\n   * Loads a playlist into the player. This method will load the first element\n   * in the playlist. Use it to initialize the playlist.\n   *\n   * Note: A copy of the playlist items array is made internally to ensure that\n   * external modifications to the array do not affect the internal state and\n   * vice versa.\n   *\n   * @param {PlaylistItem[]} items The playlist items to load.\n   */\n  load(items) {\n    this.items_ = [...items];\n    this.select(0);\n  }\n\n  /**\n   * Adds one or more items at the end of the playlist. This method will not\n   * load any of the elements. Use it to add items while the playlist is\n   * running.\n   *\n   * @param {...PlaylistItem} items the items to add to the playlist.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\n   */\n  push(...items) {\n    this.items_.push(...items);\n    this.updateState_();\n  }\n\n  /**\n   * Modifies the contents of the playlist by removing or replacing existing\n   * elements and/or adding new elements.\n   *\n   * The method also adjusts currentIndex accordingly if items are added or\n   * removed in such a way that it affects the currentIndex.\n   *\n   * If the current item is deleted then the currentIndex becomes -1, the\n   * current element will continue playing but the next element will be the\n   * first element in the playlist.\n   *\n   * @param {number} start The zero-based location in the array from which to\n   *                       start removing elements.\n   * @param {number} deleteCount The number of elements to remove.\n   * @param {...PlaylistItem} items The items to add to the playlist.\n   *\n   * @return {PlaylistItem[]} An array containing the deleted elements.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\n   */\n  splice(start, deleteCount, ...items) {\n    const itemsAddedCount = items.length;\n    const deletedElements = this.items_.splice(start, deleteCount, ...items);\n    const deletedElementsCount = deletedElements.length;\n    if (this.currentIndex_ >= start && this.currentIndex_ < start + deletedElementsCount) {\n      // Current item was removed, set currentIndex to -1\n      this.currentIndex_ = -1;\n    } else if (this.currentIndex_ >= start) {\n      // Adjust currentIndex based on the net items added/removed\n      this.currentIndex_ = this.currentIndex_ - deletedElementsCount + itemsAddedCount;\n    }\n    this.updateState_();\n    return deletedElements;\n  }\n\n  /**\n   * Clears the internal playlist. This method empties the playlist and resets\n   * the current index to -1.\n   *\n   * Note that this method does not stop the currently playing media or unload it.\n   */\n  clear() {\n    this.items_ = [];\n    this.currentIndex_ = -1;\n    this.updateState_();\n  }\n\n  /**\n   * Reverses the order of the items in the playlist and updates the current index to reflect\n   * the new position of the previously current item after reversal.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\n   */\n  reverse() {\n    if (!this.items_.length) return;\n    this.items_.reverse();\n    this.currentIndex_ = this.items_.length - 1 - this.currentIndex_;\n    this.updateState_();\n  }\n\n  /**\n   * Sorts the items in the playlist using the provided compare function and updates the current\n   * index to reflect the new position of the previously current item after sorting.\n   *\n   * @method sort\n   * @param {Function} compareFn - A function that defines the sort order.\n   *        The return value should be a number whose sign indicates the relative order\n   *        of the two elements: negative if a is less than b, positive if a is\n   *        greater than b, and zero if they are equal. NaN is treated as 0. If omitted,\n   *        the array elements are converted to strings, then sorted according to each\n   *        character's Unicode code point value.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n   */\n  sort(compareFn) {\n    if (!this.items_.length) return;\n    const currentItem = this.currentItem;\n    this.items_.sort(compareFn);\n    this.currentIndex_ = this.items_.indexOf(currentItem);\n    this.updateState_();\n  }\n\n  /**\n   * Get the currently playing index.\n   *\n   * @returns {number} the currently playing index.\n   */\n  get currentIndex() {\n    return this.currentIndex_;\n  }\n\n  /**\n   * Get the currently playing item.\n   *\n   * @returns {PlaylistItem} the currently playing item.\n   */\n  get currentItem() {\n    return this.items_[this.currentIndex_];\n  }\n\n  /**\n   * Get the current playlist items.This is a copy of the internal list\n   * modifying this list will not affect the playlist. use `push` and `splice`\n   * to modify the internal list.\n   *\n   * @returns {PlaylistItem[]} the current list of items.\n   */\n  get items() {\n    return [...this.items_];\n  }\n\n  /**\n   * Plays the playlist item at the given index. If the index is not in\n   * the playlist this method has no effect.\n   *\n   * @param {number} index The index of the item to play.\n   */\n  // eslint-disable-next-line max-statements\n  select(index) {\n    if (index < 0 || index >= this.items_.length) {\n      log$1.warn(`Index: ${index} is out of bounds (The current playlist has ${this.items_.length} elements)`);\n      return;\n    }\n    if (index === this.currentIndex_) {\n      log$1.warn(`Index: ${index} is already selected`);\n      return;\n    }\n    const item = this.items_[index];\n    this.player.src(item.sources);\n    this.player.poster(item.poster);\n    this.currentIndex_ = index;\n    this.updateState_();\n  }\n\n  /**\n   * Advances to the next item in the playlist. If {@link RepeatMode#REPEAT_ALL}\n   * mode is enabled, then once the last item of the playlist is reached this\n   * function will play the first one.\n   */\n  next() {\n    if (this.hasNext()) {\n      this.select(this.currentIndex_ + 1);\n      return;\n    }\n    if (this.repeat === RepeatMode.REPEAT_ALL) this.select(0);\n  }\n\n  /**\n   * Whether an element exists in the playlist after the one that is currently playing.\n   * If `repeat` mode is enabled this function will still return `false` when the\n   * current position is the last item in the playlist.\n   *\n   * @returns {boolean} true if there is an element after, false otherwise.\n   */\n  hasNext() {\n    return this.currentIndex_ + 1 < this.items_.length;\n  }\n\n  /**\n   * Navigates to the previous item in the playlist or restarts the current\n   * media based on playback position.\n   *\n   * - If the media is live, navigates to the previous item regardless of the threshold.\n   * - If playback is beyond the threshold, restarts the current media.\n   * - If playback is within the threshold, navigates to the previous item.\n   * - If {@link RepeatMode#REPEAT_ALL} mode is enabled, then once the first\n   *   item of the playlist is reached this function will play the last one.\n   *\n   * @see previousNavigationThreshold\n   */\n  previous() {\n    if (!this.isLive() && this.player.currentTime() > this.previousNavigationThreshold) {\n      this.player.currentTime(0);\n      return;\n    }\n    if (this.hasPrevious()) {\n      this.select(this.currentIndex_ - 1);\n      return;\n    }\n    if (this.repeat === RepeatMode.REPEAT_ALL) {\n      this.select(this.items_.length - 1);\n    }\n  }\n  isLive() {\n    const liveTracker = this.player.liveTracker;\n    return liveTracker && liveTracker.isLive();\n  }\n\n  /**\n   * Whether an element exists before the one that is currently playing.\n   * If `repeat` mode is enabled this function will still return `false` when the\n   * current position is the first item in the playlist.\n   *\n   * @returns {boolean} true if there is an element before, false otherwise.\n   */\n  hasPrevious() {\n    return this.currentIndex_ > 0;\n  }\n\n  /**\n   * Handles the `ended` event. If auto-advance is enabled then the next item\n   * will be played, otherwise nothing happens.\n   */\n  handleEnded() {\n    if (this.repeat === RepeatMode.REPEAT_ONE) {\n      this.player.play().then(() => {});\n      return;\n    }\n    if (!this.autoadvance) {\n      return;\n    }\n    this.next();\n  }\n\n  /**\n   * Shuffles the order of the items in the playlist randomly.\n   * This method implements the Fisher-Yates shuffle algorithm to\n   * ensure each permutation of the array elements is equally likely.\n   */\n  shuffle() {\n    for (let i = this.items_.length - 1; i > 0; i -= 1) {\n      // Pick a remaining element…\n      const j = Math.floor(Math.random() * (i + 1));\n\n      // And swap it with the current element.\n      [this.items_[i], this.items_[j]] = [this.items_[j], this.items_[i]];\n\n      // Check if the currentIndex was swapped, update if necessary\n      if (this.currentIndex_ === i) {\n        this.currentIndex_ = j;\n      } else if (this.currentIndex_ === j) {\n        this.currentIndex_ = i;\n      }\n    }\n    this.updateState_();\n  }\n\n  /**\n   * Updates the component's state with the current items and index.\n   *\n   * @private\n   */\n  updateState_() {\n    this.setState({\n      // Converts the items array to a JSON string before setting it in the state.\n      // Otherwise, the change is not detected.\n      items: JSON.stringify(this.items_),\n      currentIndex: this.currentIndex_\n    });\n  }\n  static get VERSION() {\n    return version;\n  }\n}\nPillarboxPlaylist.prototype.options_ = {\n  autoadvance: false,\n  repeat: false\n};\nvideojs.registerPlugin('pillarboxPlaylist', PillarboxPlaylist);\n\n/**\n * Represents a single item in the playlist.\n *\n * @typedef {Object} PlaylistItem\n * @property {any[]} sources The array of media sources for the playlist item.\n * @property {string} poster A url for the poster.\n * @property {Object} data The metadata for the playlist item. In this object\n *                          you can store properties related to the playlist\n *                          item such as `title`, the `duration`,\n *                          and other relevant metadata.\n */\n\n/**\n * @ignore\n * @type {typeof import('video.js/dist/types/button').default}\n */\nconst Button$1 = videojs.getComponent('Button');\n\n/**\n * The repeat button for the playlist ui. When clicked toggles the repeat mode\n * of the playlist.\n */\nclass PillarboxPlaylistRepeatButton extends Button$1 {\n  constructor(player, options) {\n    options = videojs.mergeOptions({\n      controlText: 'Repeat'\n    }, options);\n    super(player, options);\n    this.controlText(this.repeatModeAsString());\n    this.setIcon('repeat');\n  }\n\n  /**\n   * Get the playlist instance associated with the player.\n   *\n   * @returns {import('packages/pillarbox-playlist/src/pillarbox-playlist.js').default} The playlist instance.\n   */\n  playlist() {\n    return this.player().pillarboxPlaylist();\n  }\n  ready() {\n    this.$('.vjs-icon-placeholder').classList.toggle(`vjs-icon-repeat`, true);\n  }\n  repeatModeAsString() {\n    switch (this.playlist().repeat) {\n      case RepeatMode.NO_REPEAT:\n        return 'No Repeat';\n      case RepeatMode.REPEAT_ALL:\n        return 'Repeat All';\n      case RepeatMode.REPEAT_ONE:\n        return 'Repeat One';\n    }\n  }\n\n  /**\n   * Builds the CSS class string for the button.\n   *\n   * @returns {string} The CSS class string.\n   */\n  buildCSSClass() {\n    return `${this.playlist().repeat ? 'vjs-selected' : ''} ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * Handles the click event on the button.\n   *\n   * @param {Event} event - The click event.\n   */\n  handleClick(event) {\n    super.handleClick(event);\n    this.playlist().toggleRepeat();\n    this.toggleClass('vjs-selected', !this.playlist().isNoRepeatMode());\n    this.toggleClass('pbw-repeat-one', this.playlist().isRepeatOneMode());\n    this.controlText(this.repeatModeAsString());\n    this.setAttribute('aria-pressed', !this.playlist().isNoRepeatMode());\n  }\n}\nvideojs.registerComponent('PillarboxPlaylistRepeatButton', PillarboxPlaylistRepeatButton);\n\n/**\n * @ignore\n * @type {typeof import('video.js/dist/types/button').default}\n */\nconst Button = videojs.getComponent('Button');\n\n/**\n * The shuffle button for the playlist ui. When clicked shuffles the items\n * in the playlist.\n */\nclass PillarboxPlaylistShuffleButton extends Button {\n  constructor(player, options) {\n    options = videojs.mergeOptions({\n      controlText: 'Shuffle'\n    }, options);\n    super(player, options);\n    this.setIcon('shuffle');\n  }\n\n  /**\n   * Get the playlist instance associated with the player.\n   *\n   * @returns {import('packages/pillarbox-playlist/src/pillarbox-playlist.js').default} The playlist instance.\n   */\n  playlist() {\n    return this.player().pillarboxPlaylist();\n  }\n  ready() {\n    this.$('.vjs-icon-placeholder').classList.toggle(`vjs-icon-shuffle`, true);\n  }\n\n  /**\n   * Handles the click event on the button.\n   *\n   * @param {Event} event - The click event.\n   */\n  handleClick(event) {\n    super.handleClick(event);\n    this.playlist().shuffle();\n  }\n}\nvideojs.registerComponent('PillarboxPlaylistShuffleButton', PillarboxPlaylistShuffleButton);\n\n/**\n * @ignore\n * @type {typeof import('video.js/dist/types/component').default}\n */\nconst Component$1 = videojs.getComponent('Component');\nclass PillarboxPlaylistControls extends Component$1 {}\nPillarboxPlaylistControls.prototype.options_ = {\n  className: 'pbw-playlist-controls',\n  children: ['pillarboxPlaylistRepeatButton', 'pillarboxPlaylistShuffleButton', 'pillarboxPlaylistPreviousItemButton', 'pillarboxPlaylistNextItemButton']\n};\nvideojs.registerComponent('PillarboxPlaylistControls', PillarboxPlaylistControls);\n\n/**\n * @ignore\n * @type {typeof import('./pillarbox-playlist-menu-item.js').default}\n */\nconst PillarboxPlaylistMenuItem = videojs.getComponent('PillarboxPlaylistMenuItem');\n/**\n * @ignore\n * @type {typeof import('video.js/dist/types/component').default}\n */\nconst Component = videojs.getComponent('Component');\n/**\n * @ignore\n * @type {typeof import('video.js/dist/types/modal-dialog').default}\n */\nconst ModalDialog = videojs.getComponent('ModalDialog');\n\n/**\n * PlaylistMenuDialog is a custom dialog that extends the ModalDialog class.\n * It is designed to manage and display a playlist with various controls.\n */\nclass PlaylistMenuDialog extends ModalDialog {\n  /**\n   * Creates an instance of PlaylistMenuDialog.\n   *\n   * @param {import('@srgssr/pillarbox-web').Player} player - The pillarbox player instance.\n   * @param {Object} options - Options for the dialog.\n   * @param {boolean} [options.pauseOnOpen=false] - If true, the player will pause when the modal dialog is opened.\n   * @param {Object} [options.pillarboxPlaylistControls={}] - Configuration for the control buttons within the modal. You can define the order of the buttons, remove buttons you don't need, or add new ones.\n   */\n  constructor(player, options) {\n    options.temporary = false;\n    options = videojs.mergeOptions({\n      pauseOnOpen: false\n    }, options);\n    super(player, options);\n    /**\n     * Handles the 'statechanged' event when triggered by the playlist. This method\n     * serves as a proxy to the main `statechanged` handler, ensuring that additional\n     * logic can be executed or making it easier to detach the event listener later.\n     *\n     * @private\n     */\n    _defineProperty(this, \"onPlaylistStateChanged_\", ({\n      changes\n    }) => {\n      if ('items' in changes) {\n        this.removeItems();\n        this.renderItems();\n      }\n      if ('currentIndex' in changes) {\n        this.select(changes.currentIndex.to);\n      }\n    });\n    this.fill();\n    this.addChild('PillarboxPlaylistControls', options.pillarboxPlaylistControls);\n    this.renderItems();\n    this.playlist().on('statechanged', this.onPlaylistStateChanged_);\n  }\n  buildCSSClass() {\n    return `pbw-playlist-dialog ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * Dispose of the PlaylistMenuDialog instance.\n   */\n  dispose() {\n    this.playlist().off('statechanged', this.onPlaylistStateChanged_);\n    super.dispose();\n  }\n\n  /**\n   * Get the playlist instance associated with the player.\n   *\n   * @returns {import('packages/pillarbox-playlist/src/pillarbox-playlist.js').default} The playlist instance.\n   */\n  playlist() {\n    return this.player().pillarboxPlaylist();\n  }\n\n  /**\n   * Update the playlist item UI with the selected index.\n   *\n   * @param {number} index - The index of the item to select.\n   */\n  select(index) {\n    const itemList = this.getChild('PillarboxPlaylistMenuItemsList');\n    itemList.children().filter(item => item.name() === 'PillarboxPlaylistMenuItem').map(item => item.getChild('PillarboxPlaylistMenuItemButton')).forEach(button => button.selected(index === button.options().index));\n  }\n\n  /**\n   * Remove all playlist items from the dialog.\n   */\n  removeItems() {\n    this.removeChild(this.getChild('PillarboxPlaylistMenuItemsList'));\n  }\n\n  /**\n   * Render the playlist items in the dialog.\n   */\n  renderItems() {\n    const itemListEl = new Component(this.player(), {\n      name: 'PillarboxPlaylistMenuItemsList',\n      el: videojs.dom.createEl('ol', {\n        className: 'pbw-playlist-items'\n      })\n    });\n    this.playlist().items.forEach((item, index) => {\n      const itemEl = new Component(this.player(), {\n        name: 'PillarboxPlaylistMenuItem',\n        el: videojs.dom.createEl('li', {\n          className: 'pbw-playlist-item'\n        })\n      });\n      itemEl.addChild(new PillarboxPlaylistMenuItem(this.player(), {\n        item,\n        index,\n        name: 'PillarboxPlaylistMenuItemButton'\n      }));\n      itemListEl.addChild(itemEl);\n    });\n    this.addChild(itemListEl);\n  }\n}\nvideojs.registerComponent('PillarboxPlaylistMenuDialog', PlaylistMenuDialog);\n\nconst Playlist$4 = \"Wiedergabeliste\";\nconst Shuffle$4 = \"Mischen\";\nconst de = {\n\t\"Next Item\": \"Nächstes element\",\n\t\"No Repeat\": \"Keine Wiederholung\",\n\tPlaylist: Playlist$4,\n\t\"Previous Item\": \"Vorheriges Element\",\n\t\"Repeat All\": \"Alle Wiederholen\",\n\t\"Repeat One\": \"Einzelnes Wiederholen\",\n\tShuffle: Shuffle$4\n};\n\nconst Playlist$3 = \"Playlist\";\nconst Shuffle$3 = \"Shuffle\";\nconst en = {\n\t\"Next Item\": \"Next Item\",\n\t\"No Repeat\": \"No Repeat\",\n\tPlaylist: Playlist$3,\n\t\"Previous Item\": \"Previous Item\",\n\t\"Repeat All\": \"Repeat All\",\n\t\"Repeat One\": \"Repeat One\",\n\tShuffle: Shuffle$3\n};\n\nconst Playlist$2 = \"Liste de lecture\";\nconst Shuffle$2 = \"Mélanger\";\nconst fr = {\n\t\"Next Item\": \"Élément suivant\",\n\t\"No Repeat\": \"Pas de Répétition\",\n\tPlaylist: Playlist$2,\n\t\"Previous Item\": \"Élément précédent\",\n\t\"Repeat All\": \"Répéter Tout\",\n\t\"Repeat One\": \"Répéter Un\",\n\tShuffle: Shuffle$2\n};\n\nconst Playlist$1 = \"Playlist\";\nconst Shuffle$1 = \"Mescola\";\nconst it = {\n\t\"Next Item\": \"Elemento successivo\",\n\t\"No Repeat\": \"Nessuna Ripetizione\",\n\tPlaylist: Playlist$1,\n\t\"Previous Item\": \"Elemento precedente\",\n\t\"Repeat All\": \"Ripeti Tutto\",\n\t\"Repeat One\": \"Ripeti Uno\",\n\tShuffle: Shuffle$1\n};\n\nconst Playlist = \"Glista da reprodukziun\";\nconst Shuffle = \"Maschadar\";\nconst rm = {\n\t\"Next Item\": \"Element proxim\",\n\t\"No Repeat\": \"Nagins Repeter\",\n\tPlaylist: Playlist,\n\t\"Previous Item\": \"Element precedent\",\n\t\"Repeat All\": \"Repeter Tut\",\n\t\"Repeat One\": \"Repeter In\",\n\tShuffle: Shuffle\n};\n\nfunction extendLanguage(code, data) {\n  var _videojs$options$lang;\n  videojs.addLanguage(code, _objectSpread2(_objectSpread2({}, (_videojs$options$lang = videojs.options.language[code]) !== null && _videojs$options$lang !== void 0 ? _videojs$options$lang : {}), data));\n}\nextendLanguage('de', de);\nextendLanguage('en', en);\nextendLanguage('fr', fr);\nextendLanguage('it', it);\nextendLanguage('rm', rm);\n\n/**\n * @ignore\n * @type {typeof import('video.js/dist/types/plugin').default}\n */\nconst Plugin = videojs.getPlugin('plugin');\nconst log = videojs.log.createLogger('pillarbox-playlist-ui');\n\n/**\n *  A plugin that adds a playlist button to the control bar.\n */\nclass PillarboxPlaylistUI extends Plugin {\n  /**\n   * Creates an instance of the pillarbox playlist UI.\n   *\n   * @param {Player} player - The video.js player instance.\n   * @param {Object} options - Plugin options.\n   * @param {string} [options.insertChildBefore='fullscreenToggle'] - The control bar child name before which the playlist button should be inserted.\n   * @param {Object} [options.pillarboxPlaylistButton={}] - Configuration for the playlist button.\n   * @param {Object} [options.pillarboxPlaylistMenuDialog={}] - Configuration for the modal dialog component. This can take any modal dialog options available in video.js.\n   */\n  constructor(player, options) {\n    var _options$pillarboxPla;\n    super(player);\n    if (!player.usingPlugin('pillarboxPlaylist')) {\n      log.error('pillarbox-playlist plugin is required');\n      return;\n    }\n    options = this.options_ = videojs.obj.merge(this.options_, options);\n    player.options({\n      pillarboxPlaylistMenuDialog: (_options$pillarboxPla = options.pillarboxPlaylistMenuDialog) !== null && _options$pillarboxPla !== void 0 ? _options$pillarboxPla : true,\n      controlBar: this.mergeControlBarOptions(player, options)\n    });\n  }\n\n  /**\n   * This function takes the existing control bar options from the player instance\n   * and merges them with the provided plugin options:\n   *\n   * - If the control bar is disabled in the player options, it returns the existing control bar\n   *   settings without modifications.\n   * - Otherwise, it merges the default ControlBar options and the player's control bar\n   *   options, and then handles the insertion of the pillarbox playlist button.\n   *   into the control bar's children array.\n   *\n   * @param {Player} player - The  player instance.\n   * @param {Object} options - The options to merge into the control bar options.\n   * @param {string} [options.insertChildBefore] - The name of the child before which to insert the pillarbox playlist button.\n   *\n   * @returns {Object|boolean} The merged control bar options, or false if the control bar is disabled.\n   */\n  mergeControlBarOptions(player, options) {\n    var _options$pillarboxPla2;\n    if (player.options_.controlBar === false) return player.options_.controlBar;\n    const controlBarOptions = videojs.obj.merge(videojs.getComponent('ControlBar').prototype.options_, player.options_.controlBar);\n    const index = controlBarOptions.children.findIndex(item => item === options.insertChildBefore);\n    if (options.insertChildBefore && index !== -1) {\n      const children = [...controlBarOptions.children];\n      children.splice(index, 0, 'pillarboxPlaylistButton');\n      controlBarOptions.children = children;\n      return controlBarOptions;\n    }\n    controlBarOptions.pillarboxPlaylistButton = (_options$pillarboxPla2 = options.pillarboxPlaylistButton) !== null && _options$pillarboxPla2 !== void 0 ? _options$pillarboxPla2 : true;\n    return controlBarOptions;\n  }\n}\nPillarboxPlaylistUI.prototype.options_ = {\n  insertChildBefore: 'fullscreenToggle'\n};\nvideojs.registerPlugin('pillarboxPlaylistUI', PillarboxPlaylistUI);\n\nexport { PillarboxPlaylistUI as default };\n//# sourceMappingURL=pillarbox-playlist-ui.js.map\n","\n  // Import the pillarbox library and the SrgSsr utility class\n  import { default as pillarbox, SrgSsr } from '@srgssr/pillarbox-web';\n  // Import the playlist plugin for pillarbox\n  import '@srgssr/pillarbox-playlist';\n  // Import the playlist UI plugin for pillarbox\n  import '@srgssr/pillarbox-playlist/ui';\n\n  // Create a pillarbox player instance with the playlist plugin\n  const player = pillarbox('video-element-id', {\n    // Activate autoplay to automatically start the next element\n    autoplay: true,\n    muted: true,\n    plugins: {\n      // Configure the playlist plugin\n      pillarboxPlaylist: { autoadvance: true, repeat: true },\n      // Configure the playlist UI plugin and specify where to insert it in the UI\n      pillarboxPlaylistUI: { insertChildBefore: 'fullscreenToggle' }\n    }\n  });\n\n  // Define an array of video sources\n  const sources = [\n    'urn:rts:video:14827742',\n    'urn:srf:video:05457f66-fd67-4131-8e0a-6d85743efc39',\n    'urn:rtr:video:33136b80-bec6-40cd-a771-b8954c805098',\n    'urn:rts:video:9883196',\n  ];\n\n  Promise.all(sources.map(async urn => {\n    // Fetch the media composition data for each URN\n    const mediaComposition = await SrgSsr.getMediaComposition(urn, SrgSsr.dataProvider(player));\n    // Get the main chapter of the media composition\n    const mainChapter = mediaComposition.getMainChapter();\n\n    return {\n      // Define the sources of this playlist item URL and type\n      sources: [{ src: urn, type: 'srgssr/urn' }],\n      // Define the title and duration in seconds\n      data: { title: mainChapter.title, duration: mainChapter.duration / 1000 },\n      // Define the poster image\n      poster: mainChapter.imageUrl\n    };\n  })).then(playlist => {\n    // Load the playlist\n    player.pillarboxPlaylist().load(playlist);\n  });\n","\n  import pillarbox from '@srgssr/pillarbox-web';\n  import '../../src/layout/header/core-demo-header-component.js';\n\n  document.querySelector('#close-btn').addEventListener('click', () => {\n    window.close();\n  });\n\n  window.pillarbox = pillarbox;\n"],"names":["_defineProperty","e","r","_toPropertyKey","_toPrimitive","t","i","version","Plugin","videojs","log","RepeatMode","force","player","options","_options$repeat","items","start","deleteCount","itemsAddedCount","deletedElements","deletedElementsCount","compareFn","currentItem","index","item","liveTracker","j","PillarboxPlaylist","ownKeys","o","_objectSpread2","Button$5","PillarboxPlaylistButton","changes","event","Button$4","PillarboxPlaylistMenuItem$1","_this$options_$item$d","_this$options_$item$d2","selected","Button$3","PillarboxPlaylistNextItemButton","Button$2","PillarboxPlaylistPreviousItemButton","Plugin$1","log$1","Button$1","PillarboxPlaylistRepeatButton","Button","PillarboxPlaylistShuffleButton","Component$1","PillarboxPlaylistControls","PillarboxPlaylistMenuItem","Component","ModalDialog","PlaylistMenuDialog","button","itemListEl","itemEl","Playlist$4","Shuffle$4","de","Playlist$3","Shuffle$3","en","Playlist$2","Shuffle$2","fr","Playlist$1","Shuffle$1","it","Playlist","Shuffle","rm","extendLanguage","code","data","_videojs$options$lang","PillarboxPlaylistUI","_options$pillarboxPla","_options$pillarboxPla2","controlBarOptions","children","pillarbox","sources","urn","mainChapter","SrgSsr","playlist"],"mappings":"2EAEA,SAASA,EAAgBC,EAAGC,EAAG,EAAG,CAChC,OAAQA,EAAIC,EAAeD,CAAC,KAAMD,EAAI,OAAO,eAAeA,EAAGC,EAAG,CAChE,MAAO,EACP,WAAY,GACZ,aAAc,GACd,SAAU,EACd,CAAG,EAAID,EAAEC,CAAC,EAAI,EAAGD,CACjB,CACA,SAASG,EAAaC,EAAGH,EAAG,CAC1B,GAAgB,OAAOG,GAAnB,UAAwB,CAACA,EAAG,OAAOA,EACvC,IAAIJ,EAAII,EAAE,OAAO,WAAW,EAC5B,GAAeJ,IAAX,OAAc,CAChB,IAAI,EAAIA,EAAE,KAAKI,EAAGH,CAAc,EAChC,GAAgB,OAAO,GAAnB,SAAsB,OAAO,EACjC,MAAM,IAAI,UAAU,8CAA8C,CACpE,CACA,OAAqBA,IAAb,SAAiB,OAAS,QAAQG,CAAC,CAC7C,CACA,SAASF,EAAeE,EAAG,CACzB,IAAIC,EAAIF,EAAaC,EAAG,QAAQ,EAChC,OAAmB,OAAOC,GAAnB,SAAuBA,EAAIA,EAAI,EACxC,CAEA,MAAMC,EAAU,QAMVC,EAASC,EAAQ,UAAU,QAAQ,EACnCC,EAAMD,EAAQ,IAAI,aAAa,oBAAoB,EAOnDE,EAAa,CAIjB,UAAW,EAMX,WAAY,EAIZ,WAAY,CACd,QAKA,cAAgCH,CAAO,CAQrC,aAAaI,EAAQ,OAAW,CAC9B,KAAK,OAASA,IAA8C,KAAK,OAAS,GAAK,OAAO,KAAKD,CAAU,EAAE,MACzG,CAOA,iBAAkB,CAChB,OAAO,KAAK,SAAWA,EAAW,UACpC,CAOA,iBAAkB,CAChB,OAAO,KAAK,SAAWA,EAAW,UACpC,CAOA,gBAAiB,CACf,OAAO,KAAK,SAAWA,EAAW,SACpC,CAcA,kBAAkBC,EAAQ,OAAW,CACnC,KAAK,YAAcA,GAA6C,CAAC,KAAK,WACxE,CAoBA,YAAYC,EAAQC,EAAS,CAC3B,IAAIC,EACJ,MAAMF,CAAM,EAOZb,EAAgB,KAAM,SAAU,EAAE,EAOlCA,EAAgB,KAAM,gBAAiB,EAAE,EAgBzCA,EAAgB,KAAM,8BAA+B,CAAC,EAMtDA,EAAgB,KAAM,SAAUW,EAAW,SAAS,EACpDX,EAAgB,KAAM,cAAe,EAAK,EAC1CA,EAAgB,KAAM,WAAY,IAAM,KAAK,YAAW,CAAE,EAC1Dc,EAAU,KAAK,SAAWL,EAAQ,IAAI,MAAM,KAAK,SAAUK,CAAO,EAC9DA,EAAQ,UAAYA,EAAQ,SAAS,QACvCD,EAAO,MAAM,IAAM,CACjB,KAAK,KAAK,GAAGC,EAAQ,QAAQ,CAC/B,CAAC,EAEH,KAAK,YAAc,EAAQA,EAAQ,YACnC,KAAK,QAAUC,EAAkBD,EAAQ,UAAY,MAAQC,IAAoB,OAASA,EAAkB,KAAK,OACjH,KAAK,4BAA8B,OAAO,SAASD,EAAQ,2BAA2B,EAAIA,EAAQ,4BAA8B,KAAK,4BACrI,KAAK,OAAO,GAAG,QAAS,KAAK,QAAQ,CACvC,CACA,SAAU,CACR,KAAK,OAAO,IAAI,QAAS,KAAK,QAAQ,CACxC,CAYA,KAAKE,EAAO,CACV,KAAK,OAAS,CAAC,GAAGA,CAAK,EACvB,KAAK,OAAO,CAAC,CACf,CAWA,QAAQA,EAAO,CACb,KAAK,OAAO,KAAK,GAAGA,CAAK,EACzB,KAAK,aAAY,CACnB,CAsBA,OAAOC,EAAOC,KAAgBF,EAAO,CACnC,MAAMG,EAAkBH,EAAM,OACxBI,EAAkB,KAAK,OAAO,OAAOH,EAAOC,EAAa,GAAGF,CAAK,EACjEK,EAAuBD,EAAgB,OAC7C,OAAI,KAAK,eAAiBH,GAAS,KAAK,cAAgBA,EAAQI,EAE9D,KAAK,cAAgB,GACZ,KAAK,eAAiBJ,IAE/B,KAAK,cAAgB,KAAK,cAAgBI,EAAuBF,GAEnE,KAAK,aAAY,EACVC,CACT,CAQA,OAAQ,CACN,KAAK,OAAS,CAAA,EACd,KAAK,cAAgB,GACrB,KAAK,aAAY,CACnB,CAQA,SAAU,CACH,KAAK,OAAO,SACjB,KAAK,OAAO,QAAO,EACnB,KAAK,cAAgB,KAAK,OAAO,OAAS,EAAI,KAAK,cACnD,KAAK,aAAY,EACnB,CAgBA,KAAKE,EAAW,CACd,GAAI,CAAC,KAAK,OAAO,OAAQ,OACzB,MAAMC,EAAc,KAAK,YACzB,KAAK,OAAO,KAAKD,CAAS,EAC1B,KAAK,cAAgB,KAAK,OAAO,QAAQC,CAAW,EACpD,KAAK,aAAY,CACnB,CAOA,IAAI,cAAe,CACjB,OAAO,KAAK,aACd,CAOA,IAAI,aAAc,CAChB,OAAO,KAAK,OAAO,KAAK,aAAa,CACvC,CASA,IAAI,OAAQ,CACV,MAAO,CAAC,GAAG,KAAK,MAAM,CACxB,CASA,OAAOC,EAAO,CACZ,GAAIA,EAAQ,GAAKA,GAAS,KAAK,OAAO,OAAQ,CAC5Cd,EAAI,KAAK,UAAUc,CAAK,+CAA+C,KAAK,OAAO,MAAM,YAAY,EACrG,MACF,CACA,GAAIA,IAAU,KAAK,cAAe,CAChCd,EAAI,KAAK,UAAUc,CAAK,sBAAsB,EAC9C,MACF,CACA,MAAMC,EAAO,KAAK,OAAOD,CAAK,EAC9B,KAAK,OAAO,IAAIC,EAAK,OAAO,EAC5B,KAAK,OAAO,OAAOA,EAAK,MAAM,EAC9B,KAAK,cAAgBD,EACrB,KAAK,aAAY,CACnB,CAOA,MAAO,CACL,GAAI,KAAK,UAAW,CAClB,KAAK,OAAO,KAAK,cAAgB,CAAC,EAClC,MACF,CACI,KAAK,SAAWb,EAAW,YAAY,KAAK,OAAO,CAAC,CAC1D,CASA,SAAU,CACR,OAAO,KAAK,cAAgB,EAAI,KAAK,OAAO,MAC9C,CAcA,UAAW,CACT,GAAI,CAAC,KAAK,UAAY,KAAK,OAAO,YAAW,EAAK,KAAK,4BAA6B,CAClF,KAAK,OAAO,YAAY,CAAC,EACzB,MACF,CACA,GAAI,KAAK,cAAe,CACtB,KAAK,OAAO,KAAK,cAAgB,CAAC,EAClC,MACF,CACI,KAAK,SAAWA,EAAW,YAC7B,KAAK,OAAO,KAAK,OAAO,OAAS,CAAC,CAEtC,CACA,QAAS,CACP,MAAMe,EAAc,KAAK,OAAO,YAChC,OAAOA,GAAeA,EAAY,OAAM,CAC1C,CASA,aAAc,CACZ,OAAO,KAAK,cAAgB,CAC9B,CAMA,aAAc,CACZ,GAAI,KAAK,SAAWf,EAAW,WAAY,CACzC,KAAK,OAAO,KAAI,EAAG,KAAK,IAAM,CAAC,CAAC,EAChC,MACF,CACK,KAAK,aAGV,KAAK,KAAI,CACX,CAOA,SAAU,CACR,QAASL,EAAI,KAAK,OAAO,OAAS,EAAGA,EAAI,EAAGA,GAAK,EAAG,CAElD,MAAMqB,EAAI,KAAK,MAAM,KAAK,UAAYrB,EAAI,EAAE,EAG5C,CAAC,KAAK,OAAOA,CAAC,EAAG,KAAK,OAAOqB,CAAC,CAAC,EAAI,CAAC,KAAK,OAAOA,CAAC,EAAG,KAAK,OAAOrB,CAAC,CAAC,EAG9D,KAAK,gBAAkBA,EACzB,KAAK,cAAgBqB,EACZ,KAAK,gBAAkBA,IAChC,KAAK,cAAgBrB,EAEzB,CACA,KAAK,aAAY,CACnB,CAOA,cAAe,CACb,KAAK,SAAS,CAGZ,MAAO,KAAK,UAAU,KAAK,MAAM,EACjC,aAAc,KAAK,aACzB,CAAK,CACH,CACA,WAAW,SAAU,CACnB,OAAOC,CACT,CACF,EACAqB,EAAkB,UAAU,SAAW,CACrC,YAAa,GACb,OAAQ,EACV,EACAnB,EAAQ,eAAe,oBAAqBmB,CAAiB,ECzd7D,SAAS5B,EAAgBC,EAAGC,EAAG,EAAG,CAChC,OAAQA,EAAIC,EAAeD,CAAC,KAAMD,EAAI,OAAO,eAAeA,EAAGC,EAAG,CAChE,MAAO,EACP,WAAY,GACZ,aAAc,GACd,SAAU,EACd,CAAG,EAAID,EAAEC,CAAC,EAAI,EAAGD,CACjB,CACA,SAAS4B,EAAQ5B,EAAGC,EAAG,CACrB,IAAI,EAAI,OAAO,KAAKD,CAAC,EACrB,GAAI,OAAO,sBAAuB,CAChC,IAAI6B,EAAI,OAAO,sBAAsB7B,CAAC,EACtCC,IAAM4B,EAAIA,EAAE,OAAO,SAAU5B,EAAG,CAC9B,OAAO,OAAO,yBAAyBD,EAAGC,CAAC,EAAE,UAC/C,CAAC,GAAI,EAAE,KAAK,MAAM,EAAG4B,CAAC,CACxB,CACA,OAAO,CACT,CACA,SAASC,EAAe9B,EAAG,CACzB,QAASC,EAAI,EAAGA,EAAI,UAAU,OAAQA,IAAK,CACzC,IAAI,EAAY,UAAUA,CAAC,GAAnB,KAAuB,UAAUA,CAAC,EAAI,CAAA,EAC9CA,EAAI,EAAI2B,EAAQ,OAAO,CAAC,EAAG,EAAE,EAAE,QAAQ,SAAU3B,EAAG,CAClDF,EAAgBC,EAAGC,EAAG,EAAEA,CAAC,CAAC,CAC5B,CAAC,EAAI,OAAO,0BAA4B,OAAO,iBAAiBD,EAAG,OAAO,0BAA0B,CAAC,CAAC,EAAI4B,EAAQ,OAAO,CAAC,CAAC,EAAE,QAAQ,SAAU3B,EAAG,CAChJ,OAAO,eAAeD,EAAGC,EAAG,OAAO,yBAAyB,EAAGA,CAAC,CAAC,CACnE,CAAC,CACH,CACA,OAAOD,CACT,CACA,SAASG,EAAaC,EAAGH,EAAG,CAC1B,GAAgB,OAAOG,GAAnB,UAAwB,CAACA,EAAG,OAAOA,EACvC,IAAIJ,EAAII,EAAE,OAAO,WAAW,EAC5B,GAAeJ,IAAX,OAAc,CAChB,IAAI,EAAIA,EAAE,KAAKI,EAAGH,CAAc,EAChC,GAAgB,OAAO,GAAnB,SAAsB,OAAO,EACjC,MAAM,IAAI,UAAU,8CAA8C,CACpE,CACA,OAAqBA,IAAb,SAAiB,OAAS,QAAQG,CAAC,CAC7C,CACA,SAASF,EAAeE,EAAG,CACzB,IAAIC,EAAIF,EAAaC,EAAG,QAAQ,EAChC,OAAmB,OAAOC,GAAnB,SAAuBA,EAAIA,EAAI,EACxC,CAMA,MAAM0B,EAAWvB,EAAQ,aAAa,QAAQ,EAK9C,MAAMwB,UAAgCD,CAAS,CAO7C,YAAYnB,EAAQC,EAAS,CAC3BA,EAAUL,EAAQ,aAAa,CAC7B,YAAa,UACnB,EAAOK,CAAO,EACV,MAAMD,EAAQC,CAAO,EAQrBd,EAAgB,KAAM,0BAA2B,CAAC,CAChD,QAAAkC,CACN,IAAU,CACA,UAAWA,GACb,KAAK,iBAAgB,CAEzB,CAAC,EACD,KAAK,QAAQ,UAAU,EACvB,KAAK,SAAQ,EAAG,GAAG,eAAgB,KAAK,uBAAuB,CACjE,CAOA,UAAW,CACT,OAAO,KAAK,OAAM,EAAG,kBAAiB,CACxC,CACA,OAAQ,CACN,KAAK,EAAE,uBAAuB,EAAE,UAAU,OAAO,oBAAqB,EAAI,CAC5E,CAKA,SAAU,CACR,KAAK,SAAQ,EAAG,IAAI,eAAgB,KAAK,uBAAuB,EAChE,MAAM,QAAO,CACf,CAOA,eAAgB,CACd,MAAO,kCAAkC,MAAM,cAAa,CAAE,EAChE,CAOA,YAAYC,EAAO,CACjB,MAAM,YAAYA,CAAK,EACvB,KAAK,OAAM,EAAG,SAAS,6BAA6B,EAAE,KAAI,CAC5D,CAKA,kBAAmB,CACjB,GAAI,KAAK,SAAQ,EAAG,MAAM,OAAS,EAAG,CACpC,KAAK,KAAI,EACT,MACF,CACA,KAAK,KAAI,CACX,CACF,CACA1B,EAAQ,kBAAkB,0BAA2BwB,CAAuB,EAM5E,MAAMG,EAAW3B,EAAQ,aAAa,QAAQ,EAK9C,IAAI4B,EAA8B,cAAwCD,CAAS,CAWjF,YAAYvB,EAAQC,EAAS,CAC3B,IAAIwB,EAAuBC,EAC3B,MAAM1B,EAAQC,CAAO,EACrB,KAAK,SAASA,EAAQ,QAAU,KAAK,SAAQ,EAAG,YAAY,EAC5D,KAAK,YAAY,IAAIwB,EAAwB,KAAK,SAAS,KAAK,QAAU,MAAQA,IAA0B,OAAS,OAASA,EAAsB,KAAK,MAAM7B,EAAQ,YAAY8B,EAAyB,KAAK,SAAS,KAAK,QAAU,MAAQA,IAA2B,OAAS,OAASA,EAAuB,QAAQ,CAAC,EAAE,CAClU,CAOA,UAAW,CACT,OAAO,KAAK,OAAM,EAAG,kBAAiB,CACxC,CAOA,YAAYJ,EAAO,CACjB,MAAM,YAAYA,CAAK,EACvB,KAAK,SAAQ,EAAG,OAAO,KAAK,SAAS,KAAK,CAC5C,CAOA,SAASK,EAAU,CACjB,KAAK,YAAY,eAAgBA,CAAQ,CAC3C,CAOA,eAAgB,CACd,MAAO,6CAA6C,MAAM,cAAa,CAAE,EAC3E,CACF,EACA/B,EAAQ,kBAAkB,4BAA6B4B,CAA2B,EAMlF,MAAMI,EAAWhC,EAAQ,aAAa,QAAQ,EAM9C,MAAMiC,UAAwCD,CAAS,CACrD,YAAY5B,EAAQC,EAAS,CAC3BA,EAAUL,EAAQ,aAAa,CAC7B,YAAa,WACnB,EAAOK,CAAO,EACV,MAAMD,EAAQC,CAAO,EACrB,KAAK,QAAQ,WAAW,CAC1B,CAOA,UAAW,CACT,OAAO,KAAK,OAAM,EAAG,kBAAiB,CACxC,CACA,OAAQ,CACN,KAAK,EAAE,uBAAuB,EAAE,UAAU,OAAO,qBAAsB,EAAI,CAC7E,CAOA,YAAYqB,EAAO,CACjB,MAAM,YAAYA,CAAK,EACvB,KAAK,SAAQ,EAAG,KAAI,CACtB,CACF,CACA1B,EAAQ,kBAAkB,kCAAmCiC,CAA+B,EAM5F,MAAMC,EAAWlC,EAAQ,aAAa,QAAQ,EAM9C,MAAMmC,UAA4CD,CAAS,CACzD,YAAY9B,EAAQC,EAAS,CAC3BA,EAAUL,EAAQ,aAAa,CAC7B,YAAa,eACnB,EAAOK,CAAO,EACV,MAAMD,EAAQC,CAAO,EACrB,KAAK,QAAQ,eAAe,CAC9B,CAOA,UAAW,CACT,OAAO,KAAK,OAAM,EAAG,kBAAiB,CACxC,CACA,OAAQ,CACN,KAAK,EAAE,uBAAuB,EAAE,UAAU,OAAO,yBAA0B,EAAI,CACjF,CAOA,YAAYqB,EAAO,CACjB,MAAM,YAAYA,CAAK,EACvB,KAAK,SAAQ,EAAG,SAAQ,CAC1B,CACF,CACA1B,EAAQ,kBAAkB,sCAAuCmC,CAAmC,EAEpG,MAAMrC,EAAU,QAMVsC,EAAWpC,EAAQ,UAAU,QAAQ,EACrCqC,EAAQrC,EAAQ,IAAI,aAAa,oBAAoB,EAOrDE,EAAa,CAIjB,UAAW,EAMX,WAAY,EAIZ,WAAY,CACd,EAKA,MAAMiB,UAA0BiB,CAAS,CAQvC,aAAajC,EAAQ,OAAW,CAC9B,KAAK,OAASA,IAA8C,KAAK,OAAS,GAAK,OAAO,KAAKD,CAAU,EAAE,MACzG,CAOA,iBAAkB,CAChB,OAAO,KAAK,SAAWA,EAAW,UACpC,CAOA,iBAAkB,CAChB,OAAO,KAAK,SAAWA,EAAW,UACpC,CAOA,gBAAiB,CACf,OAAO,KAAK,SAAWA,EAAW,SACpC,CAcA,kBAAkBC,EAAQ,OAAW,CACnC,KAAK,YAAcA,GAA6C,CAAC,KAAK,WACxE,CAoBA,YAAYC,EAAQC,EAAS,CAC3B,IAAIC,EACJ,MAAMF,CAAM,EAOZb,EAAgB,KAAM,SAAU,EAAE,EAOlCA,EAAgB,KAAM,gBAAiB,EAAE,EAgBzCA,EAAgB,KAAM,8BAA+B,CAAC,EAMtDA,EAAgB,KAAM,SAAUW,EAAW,SAAS,EACpDX,EAAgB,KAAM,cAAe,EAAK,EAC1CA,EAAgB,KAAM,WAAY,IAAM,KAAK,YAAW,CAAE,EAC1Dc,EAAU,KAAK,SAAWL,EAAQ,IAAI,MAAM,KAAK,SAAUK,CAAO,EAC9DA,EAAQ,UAAYA,EAAQ,SAAS,QACvCD,EAAO,MAAM,IAAM,CACjB,KAAK,KAAK,GAAGC,EAAQ,QAAQ,CAC/B,CAAC,EAEH,KAAK,YAAc,EAAQA,EAAQ,YACnC,KAAK,QAAUC,EAAkBD,EAAQ,UAAY,MAAQC,IAAoB,OAASA,EAAkB,KAAK,OACjH,KAAK,4BAA8B,OAAO,SAASD,EAAQ,2BAA2B,EAAIA,EAAQ,4BAA8B,KAAK,4BACrI,KAAK,OAAO,GAAG,QAAS,KAAK,QAAQ,CACvC,CACA,SAAU,CACR,KAAK,OAAO,IAAI,QAAS,KAAK,QAAQ,CACxC,CAYA,KAAKE,EAAO,CACV,KAAK,OAAS,CAAC,GAAGA,CAAK,EACvB,KAAK,OAAO,CAAC,CACf,CAWA,QAAQA,EAAO,CACb,KAAK,OAAO,KAAK,GAAGA,CAAK,EACzB,KAAK,aAAY,CACnB,CAsBA,OAAOC,EAAOC,KAAgBF,EAAO,CACnC,MAAMG,EAAkBH,EAAM,OACxBI,EAAkB,KAAK,OAAO,OAAOH,EAAOC,EAAa,GAAGF,CAAK,EACjEK,EAAuBD,EAAgB,OAC7C,OAAI,KAAK,eAAiBH,GAAS,KAAK,cAAgBA,EAAQI,EAE9D,KAAK,cAAgB,GACZ,KAAK,eAAiBJ,IAE/B,KAAK,cAAgB,KAAK,cAAgBI,EAAuBF,GAEnE,KAAK,aAAY,EACVC,CACT,CAQA,OAAQ,CACN,KAAK,OAAS,CAAA,EACd,KAAK,cAAgB,GACrB,KAAK,aAAY,CACnB,CAQA,SAAU,CACH,KAAK,OAAO,SACjB,KAAK,OAAO,QAAO,EACnB,KAAK,cAAgB,KAAK,OAAO,OAAS,EAAI,KAAK,cACnD,KAAK,aAAY,EACnB,CAgBA,KAAKE,EAAW,CACd,GAAI,CAAC,KAAK,OAAO,OAAQ,OACzB,MAAMC,EAAc,KAAK,YACzB,KAAK,OAAO,KAAKD,CAAS,EAC1B,KAAK,cAAgB,KAAK,OAAO,QAAQC,CAAW,EACpD,KAAK,aAAY,CACnB,CAOA,IAAI,cAAe,CACjB,OAAO,KAAK,aACd,CAOA,IAAI,aAAc,CAChB,OAAO,KAAK,OAAO,KAAK,aAAa,CACvC,CASA,IAAI,OAAQ,CACV,MAAO,CAAC,GAAG,KAAK,MAAM,CACxB,CASA,OAAOC,EAAO,CACZ,GAAIA,EAAQ,GAAKA,GAAS,KAAK,OAAO,OAAQ,CAC5CsB,EAAM,KAAK,UAAUtB,CAAK,+CAA+C,KAAK,OAAO,MAAM,YAAY,EACvG,MACF,CACA,GAAIA,IAAU,KAAK,cAAe,CAChCsB,EAAM,KAAK,UAAUtB,CAAK,sBAAsB,EAChD,MACF,CACA,MAAMC,EAAO,KAAK,OAAOD,CAAK,EAC9B,KAAK,OAAO,IAAIC,EAAK,OAAO,EAC5B,KAAK,OAAO,OAAOA,EAAK,MAAM,EAC9B,KAAK,cAAgBD,EACrB,KAAK,aAAY,CACnB,CAOA,MAAO,CACL,GAAI,KAAK,UAAW,CAClB,KAAK,OAAO,KAAK,cAAgB,CAAC,EAClC,MACF,CACI,KAAK,SAAWb,EAAW,YAAY,KAAK,OAAO,CAAC,CAC1D,CASA,SAAU,CACR,OAAO,KAAK,cAAgB,EAAI,KAAK,OAAO,MAC9C,CAcA,UAAW,CACT,GAAI,CAAC,KAAK,UAAY,KAAK,OAAO,YAAW,EAAK,KAAK,4BAA6B,CAClF,KAAK,OAAO,YAAY,CAAC,EACzB,MACF,CACA,GAAI,KAAK,cAAe,CACtB,KAAK,OAAO,KAAK,cAAgB,CAAC,EAClC,MACF,CACI,KAAK,SAAWA,EAAW,YAC7B,KAAK,OAAO,KAAK,OAAO,OAAS,CAAC,CAEtC,CACA,QAAS,CACP,MAAMe,EAAc,KAAK,OAAO,YAChC,OAAOA,GAAeA,EAAY,OAAM,CAC1C,CASA,aAAc,CACZ,OAAO,KAAK,cAAgB,CAC9B,CAMA,aAAc,CACZ,GAAI,KAAK,SAAWf,EAAW,WAAY,CACzC,KAAK,OAAO,KAAI,EAAG,KAAK,IAAM,CAAC,CAAC,EAChC,MACF,CACK,KAAK,aAGV,KAAK,KAAI,CACX,CAOA,SAAU,CACR,QAASL,EAAI,KAAK,OAAO,OAAS,EAAGA,EAAI,EAAGA,GAAK,EAAG,CAElD,MAAMqB,EAAI,KAAK,MAAM,KAAK,UAAYrB,EAAI,EAAE,EAG5C,CAAC,KAAK,OAAOA,CAAC,EAAG,KAAK,OAAOqB,CAAC,CAAC,EAAI,CAAC,KAAK,OAAOA,CAAC,EAAG,KAAK,OAAOrB,CAAC,CAAC,EAG9D,KAAK,gBAAkBA,EACzB,KAAK,cAAgBqB,EACZ,KAAK,gBAAkBA,IAChC,KAAK,cAAgBrB,EAEzB,CACA,KAAK,aAAY,CACnB,CAOA,cAAe,CACb,KAAK,SAAS,CAGZ,MAAO,KAAK,UAAU,KAAK,MAAM,EACjC,aAAc,KAAK,aACzB,CAAK,CACH,CACA,WAAW,SAAU,CACnB,OAAOC,CACT,CACF,CACAqB,EAAkB,UAAU,SAAW,CACrC,YAAa,GACb,OAAQ,EACV,EACAnB,EAAQ,eAAe,oBAAqBmB,CAAiB,EAkB7D,MAAMmB,EAAWtC,EAAQ,aAAa,QAAQ,EAM9C,MAAMuC,UAAsCD,CAAS,CACnD,YAAYlC,EAAQC,EAAS,CAC3BA,EAAUL,EAAQ,aAAa,CAC7B,YAAa,QACnB,EAAOK,CAAO,EACV,MAAMD,EAAQC,CAAO,EACrB,KAAK,YAAY,KAAK,oBAAoB,EAC1C,KAAK,QAAQ,QAAQ,CACvB,CAOA,UAAW,CACT,OAAO,KAAK,OAAM,EAAG,kBAAiB,CACxC,CACA,OAAQ,CACN,KAAK,EAAE,uBAAuB,EAAE,UAAU,OAAO,kBAAmB,EAAI,CAC1E,CACA,oBAAqB,CACnB,OAAQ,KAAK,SAAQ,EAAG,OAAM,CAC5B,KAAKH,EAAW,UACd,MAAO,YACT,KAAKA,EAAW,WACd,MAAO,aACT,KAAKA,EAAW,WACd,MAAO,YACf,CACE,CAOA,eAAgB,CACd,MAAO,GAAG,KAAK,SAAQ,EAAG,OAAS,eAAiB,EAAE,IAAI,MAAM,cAAa,CAAE,EACjF,CAOA,YAAYwB,EAAO,CACjB,MAAM,YAAYA,CAAK,EACvB,KAAK,SAAQ,EAAG,aAAY,EAC5B,KAAK,YAAY,eAAgB,CAAC,KAAK,SAAQ,EAAG,gBAAgB,EAClE,KAAK,YAAY,iBAAkB,KAAK,SAAQ,EAAG,iBAAiB,EACpE,KAAK,YAAY,KAAK,oBAAoB,EAC1C,KAAK,aAAa,eAAgB,CAAC,KAAK,SAAQ,EAAG,gBAAgB,CACrE,CACF,CACA1B,EAAQ,kBAAkB,gCAAiCuC,CAA6B,EAMxF,MAAMC,EAASxC,EAAQ,aAAa,QAAQ,EAM5C,MAAMyC,UAAuCD,CAAO,CAClD,YAAYpC,EAAQC,EAAS,CAC3BA,EAAUL,EAAQ,aAAa,CAC7B,YAAa,SACnB,EAAOK,CAAO,EACV,MAAMD,EAAQC,CAAO,EACrB,KAAK,QAAQ,SAAS,CACxB,CAOA,UAAW,CACT,OAAO,KAAK,OAAM,EAAG,kBAAiB,CACxC,CACA,OAAQ,CACN,KAAK,EAAE,uBAAuB,EAAE,UAAU,OAAO,mBAAoB,EAAI,CAC3E,CAOA,YAAYqB,EAAO,CACjB,MAAM,YAAYA,CAAK,EACvB,KAAK,SAAQ,EAAG,QAAO,CACzB,CACF,CACA1B,EAAQ,kBAAkB,iCAAkCyC,CAA8B,EAM1F,MAAMC,EAAc1C,EAAQ,aAAa,WAAW,EACpD,MAAM2C,UAAkCD,CAAY,CAAA,CACpDC,EAA0B,UAAU,SAAW,CAC7C,UAAW,wBACX,SAAU,CAAC,gCAAiC,iCAAkC,sCAAuC,iCAAiC,CACxJ,EACA3C,EAAQ,kBAAkB,4BAA6B2C,CAAyB,EAMhF,MAAMC,EAA4B5C,EAAQ,aAAa,2BAA2B,EAK5E6C,EAAY7C,EAAQ,aAAa,WAAW,EAK5C8C,EAAc9C,EAAQ,aAAa,aAAa,EAMtD,MAAM+C,UAA2BD,CAAY,CAS3C,YAAY1C,EAAQC,EAAS,CAC3BA,EAAQ,UAAY,GACpBA,EAAUL,EAAQ,aAAa,CAC7B,YAAa,EACnB,EAAOK,CAAO,EACV,MAAMD,EAAQC,CAAO,EAQrBd,EAAgB,KAAM,0BAA2B,CAAC,CAChD,QAAAkC,CACN,IAAU,CACA,UAAWA,IACb,KAAK,YAAW,EAChB,KAAK,YAAW,GAEd,iBAAkBA,GACpB,KAAK,OAAOA,EAAQ,aAAa,EAAE,CAEvC,CAAC,EACD,KAAK,KAAI,EACT,KAAK,SAAS,4BAA6BpB,EAAQ,yBAAyB,EAC5E,KAAK,YAAW,EAChB,KAAK,SAAQ,EAAG,GAAG,eAAgB,KAAK,uBAAuB,CACjE,CACA,eAAgB,CACd,MAAO,uBAAuB,MAAM,cAAa,CAAE,EACrD,CAKA,SAAU,CACR,KAAK,SAAQ,EAAG,IAAI,eAAgB,KAAK,uBAAuB,EAChE,MAAM,QAAO,CACf,CAOA,UAAW,CACT,OAAO,KAAK,OAAM,EAAG,kBAAiB,CACxC,CAOA,OAAOU,EAAO,CACK,KAAK,SAAS,gCAAgC,EACtD,SAAQ,EAAG,OAAOC,GAAQA,EAAK,KAAI,IAAO,2BAA2B,EAAE,IAAIA,GAAQA,EAAK,SAAS,iCAAiC,CAAC,EAAE,QAAQgC,GAAUA,EAAO,SAASjC,IAAUiC,EAAO,QAAO,EAAG,KAAK,CAAC,CACnN,CAKA,aAAc,CACZ,KAAK,YAAY,KAAK,SAAS,gCAAgC,CAAC,CAClE,CAKA,aAAc,CACZ,MAAMC,EAAa,IAAIJ,EAAU,KAAK,OAAM,EAAI,CAC9C,KAAM,iCACN,GAAI7C,EAAQ,IAAI,SAAS,KAAM,CAC7B,UAAW,oBACnB,CAAO,CACP,CAAK,EACD,KAAK,SAAQ,EAAG,MAAM,QAAQ,CAACgB,EAAMD,IAAU,CAC7C,MAAMmC,EAAS,IAAIL,EAAU,KAAK,OAAM,EAAI,CAC1C,KAAM,4BACN,GAAI7C,EAAQ,IAAI,SAAS,KAAM,CAC7B,UAAW,mBACrB,CAAS,CACT,CAAO,EACDkD,EAAO,SAAS,IAAIN,EAA0B,KAAK,OAAM,EAAI,CAC3D,KAAA5B,EACA,MAAAD,EACA,KAAM,iCACd,CAAO,CAAC,EACFkC,EAAW,SAASC,CAAM,CAC5B,CAAC,EACD,KAAK,SAASD,CAAU,CAC1B,CACF,CACAjD,EAAQ,kBAAkB,8BAA+B+C,CAAkB,EAE3E,MAAMI,EAAa,kBACbC,EAAY,UACZC,EAAK,CACV,YAAa,mBACb,YAAa,qBACb,SAAUF,EACV,gBAAiB,qBACjB,aAAc,mBACd,aAAc,wBACd,QAASC,CACV,EAEME,EAAa,WACbC,EAAY,UACZC,GAAK,CACV,YAAa,YACb,YAAa,YACb,SAAUF,EACV,gBAAiB,gBACjB,aAAc,aACd,aAAc,aACd,QAASC,CACV,EAEME,GAAa,mBACbC,GAAY,WACZC,GAAK,CACV,YAAa,kBACb,YAAa,oBACb,SAAUF,GACV,gBAAiB,oBACjB,aAAc,eACd,aAAc,aACd,QAASC,EACV,EAEME,GAAa,WACbC,GAAY,UACZC,GAAK,CACV,YAAa,sBACb,YAAa,sBACb,SAAUF,GACV,gBAAiB,sBACjB,aAAc,eACd,aAAc,aACd,QAASC,EACV,EAEME,GAAW,yBACXC,GAAU,YACVC,GAAK,CACV,YAAa,iBACb,YAAa,iBACb,SAAUF,GACV,gBAAiB,oBACjB,aAAc,cACd,aAAc,aACd,QAASC,EACV,EAEA,SAASE,EAAeC,EAAMC,EAAM,CAClC,IAAIC,EACJrE,EAAQ,YAAYmE,EAAM7C,EAAeA,EAAe,IAAK+C,EAAwBrE,EAAQ,QAAQ,SAASmE,CAAI,KAAO,MAAQE,IAA0B,OAASA,EAAwB,CAAA,CAAE,EAAGD,CAAI,CAAC,CACxM,CACAF,EAAe,KAAMb,CAAE,EACvBa,EAAe,KAAMV,EAAE,EACvBU,EAAe,KAAMP,EAAE,EACvBO,EAAe,KAAMJ,EAAE,EACvBI,EAAe,KAAMD,EAAE,EAMvB,MAAMlE,GAASC,EAAQ,UAAU,QAAQ,EACnCC,GAAMD,EAAQ,IAAI,aAAa,uBAAuB,EAK5D,MAAMsE,UAA4BvE,EAAO,CAUvC,YAAYK,EAAQC,EAAS,CAC3B,IAAIkE,EAEJ,GADA,MAAMnE,CAAM,EACR,CAACA,EAAO,YAAY,mBAAmB,EAAG,CAC5CH,GAAI,MAAM,uCAAuC,EACjD,MACF,CACAI,EAAU,KAAK,SAAWL,EAAQ,IAAI,MAAM,KAAK,SAAUK,CAAO,EAClED,EAAO,QAAQ,CACb,6BAA8BmE,EAAwBlE,EAAQ,+BAAiC,MAAQkE,IAA0B,OAASA,EAAwB,GAClK,WAAY,KAAK,uBAAuBnE,EAAQC,CAAO,CAC7D,CAAK,CACH,CAkBA,uBAAuBD,EAAQC,EAAS,CACtC,IAAImE,EACJ,GAAIpE,EAAO,SAAS,aAAe,GAAO,OAAOA,EAAO,SAAS,WACjE,MAAMqE,EAAoBzE,EAAQ,IAAI,MAAMA,EAAQ,aAAa,YAAY,EAAE,UAAU,SAAUI,EAAO,SAAS,UAAU,EACvHW,EAAQ0D,EAAkB,SAAS,UAAUzD,GAAQA,IAASX,EAAQ,iBAAiB,EAC7F,GAAIA,EAAQ,mBAAqBU,IAAU,GAAI,CAC7C,MAAM2D,EAAW,CAAC,GAAGD,EAAkB,QAAQ,EAC/C,OAAAC,EAAS,OAAO3D,EAAO,EAAG,yBAAyB,EACnD0D,EAAkB,SAAWC,EACtBD,CACT,CACA,OAAAA,EAAkB,yBAA2BD,EAAyBnE,EAAQ,2BAA6B,MAAQmE,IAA2B,OAASA,EAAyB,GACzKC,CACT,CACF,CACAH,EAAoB,UAAU,SAAW,CACvC,kBAAmB,kBACrB,EACAtE,EAAQ,eAAe,sBAAuBsE,CAAmB,ECzmC/D,MAAMlE,EAASuE,EAAU,mBAAoB,CAE3C,SAAU,GACV,MAAO,GACP,QAAS,CAEP,kBAAmB,CAAE,YAAa,GAAM,OAAQ,EAAI,EAEpD,oBAAqB,CAAE,kBAAmB,kBAAkB,CAClE,CACA,CAAG,EAGKC,GAAU,CACd,yBACA,qDACA,qDACA,uBACJ,EAEE,QAAQ,IAAIA,GAAQ,IAAI,MAAMC,GAAO,CAInC,MAAMC,GAFmB,MAAMC,EAAO,oBAAoBF,EAAKE,EAAO,aAAa3E,CAAM,CAAC,GAErD,eAAc,EAEnD,MAAO,CAEL,QAAS,CAAC,CAAE,IAAKyE,EAAK,KAAM,YAAY,CAAE,EAE1C,KAAM,CAAE,MAAOC,EAAY,MAAO,SAAUA,EAAY,SAAW,GAAI,EAEvE,OAAQA,EAAY,QAC1B,CACE,CAAC,CAAC,EAAE,KAAKE,GAAY,CAEnB5E,EAAO,kBAAiB,EAAG,KAAK4E,CAAQ,CAC1C,CAAC,EC1CD,SAAS,cAAc,YAAY,EAAE,iBAAiB,QAAS,IAAM,CACnE,OAAO,MAAK,CACd,CAAC,EAED,OAAO,UAAYL","x_google_ignoreList":[0,1]}