{"version":3,"file":"blocked-segment-DFRv_w89.js","sources":["../../static/showcases/blocked-segment.html?html-proxy&index=0.js","../../static/showcases/blocked-segment.html?html-proxy&index=1.js"],"sourcesContent":["\n  // Import the pillarbox library\n  import pillarbox from '@srgssr/pillarbox-web';\n\n  const Plugin = pillarbox.getPlugin('plugin');\n\n  // A Pillarbox plugin to display a blocked segment notification.\n  class BlockedSegmentNotification extends Plugin {\n    // Reference to the component used to display the blocked segment notification.\n    #component;\n    // The id for the timeout function responsible for managing the auto-hide of the notification.\n    #timeoutId;\n\n    constructor(player, options) {\n      super(player, options);\n\n      // Attach the DOM element when the player is ready,\n      this.player.ready(() => this.#attachComponent());\n      // Wait for the 'loadeddata' event to ensure the text tracks are available\n      this.player.on('loadeddata', () => this.#handleBlockedSegmentChange());\n    }\n\n    #attachComponent() {\n      this.#component = player.addChild('component', {\n        // Set the class for styling and hide the element with 'vjs-hidden'\n        className: 'pbw-blocked-segment-notification vjs-hidden'\n      });\n    }\n\n    #handleBlockedSegmentChange() {\n      // Get the text track with the ID 'srgssr-blocked-segments'\n      const blockedSegments = this.player.textTracks().getTrackById('srgssr-blocked-segments');\n\n      // Add a listener for the 'cuechange' event on the blocked segments text track\n      blockedSegments?.on('cuechange', () => {\n        // Check if there are active cues in the blocked segments text track\n        if (!blockedSegments.activeCues.length) return;\n\n        // Cancel the previous timeout\n        clearTimeout(this.#timeoutId);\n\n        // Parse the JSON content of the active cue to get the blocked segment information\n        const blockSegment = JSON.parse(blockedSegments.activeCues[0].text);\n        const blockReason = blockSegment.blockReason ?? 'UNKNOWN';\n        // Block reasons are localized out of the box, alternatively you can make your own\n        const message = this.#component.localize(blockReason);\n\n        // Update the displayed notification text with the appropriate message\n        this.#component.el().textContent = `â“˜ ${message}`;\n\n        // Show the blocked segment notification\n        this.#component.show();\n\n        // Set a timeout to hide the notification after a specified delay\n        this.#timeoutId = setTimeout(() => {\n          this.#component.hide();\n          this.#timeoutId = undefined;\n        }, this.options.delay);\n      });\n    }\n\n    // Get the options of this plugin\n    get options() {\n      return this.player.options().plugins.blockedSegmentNotification;\n    }\n  }\n\n  // Register a plugin to display notifications on blocked segments\n  pillarbox.registerPlugin('blockedSegmentNotification', BlockedSegmentNotification);\n\n  // Create a pillarbox player instance with the blockedSegmentNotification plugin\n  const player = pillarbox(\n    'video-element-id', {\n      fill: true,\n      plugins: {\n        blockedSegmentNotification: {\n          delay: 5000, // Delay in milliseconds before hiding the notification\n        }\n      }\n    }\n  );\n\n  // Load the video source for the player\n  player.src({ src: 'urn:rts:video:10894383', type: 'srgssr/urn' });\n","\n  import pillarbox from '@srgssr/pillarbox-web';\n  import '../../src/layout/header/core-demo-header-component.js';\n\n  document.querySelector('#close-btn').addEventListener('click', () => {\n    window.close();\n  });\n\n  window.pillarbox = pillarbox;\n"],"names":["Plugin","pillarbox","BlockedSegmentNotification","player","options","__privateAdd","_attachComponent","_handleBlockedSegmentChange","_component","_timeoutId","__privateMethod","attachComponent_fn","handleBlockedSegmentChange_fn","__privateSet","blockedSegments","__privateGet","blockReason","message"],"mappings":"weAIE,MAAMA,EAASC,EAAU,UAAU,QAAQ,kBAG3C,MAAMC,UAAmCF,CAAO,CAM9C,YAAYG,EAAQC,EAAS,CAC3B,MAAMD,EAAQC,CAAO,EAQvBC,EAAA,KAAAC,GAOAD,EAAA,KAAAE,GApBAF,EAAA,KAAAG,EAAA,QAEAH,EAAA,KAAAI,EAAA,QAME,KAAK,OAAO,MAAM,IAAMC,EAAA,KAAKJ,EAAAK,GAAL,UAAuB,EAE/C,KAAK,OAAO,GAAG,aAAc,IAAMD,EAAA,KAAKH,EAAAK,GAAL,UAAkC,CACtE,CA0CD,IAAI,SAAU,CACZ,OAAO,KAAK,OAAO,QAAO,EAAG,QAAQ,0BACtC,CACF,CAxDCJ,EAAA,YAEAC,EAAA,YAWAH,EAAA,YAAAK,EAAgB,UAAG,CACjBE,EAAA,KAAKL,EAAaL,EAAO,SAAS,YAAa,CAE7C,UAAW,6CACnB,CAAO,EACF,EAEDI,EAAA,YAAAK,EAA2B,UAAG,CAE5B,MAAME,EAAkB,KAAK,OAAO,WAAU,EAAG,aAAa,yBAAyB,EAGvFA,GAAA,MAAAA,EAAiB,GAAG,YAAa,IAAM,CAErC,GAAI,CAACA,EAAgB,WAAW,OAAQ,OAGxC,aAAaC,EAAA,KAAKN,EAAU,EAI5B,MAAMO,EADe,KAAK,MAAMF,EAAgB,WAAW,CAAC,EAAE,IAAI,EACjC,aAAe,UAE1CG,EAAUF,EAAA,KAAKP,GAAW,SAASQ,CAAW,EAGpDD,EAAA,KAAKP,GAAW,GAAI,EAAC,YAAc,KAAKS,CAAO,GAG/CF,EAAA,KAAKP,GAAW,OAGhBK,EAAA,KAAKJ,EAAa,WAAW,IAAM,CACjCM,EAAA,KAAKP,GAAW,OAChBK,EAAA,KAAKJ,EAAa,OAC5B,EAAW,KAAK,QAAQ,KAAK,EAC7B,EACK,EASHR,EAAU,eAAe,6BAA8BC,CAA0B,EAGjF,MAAMC,EAASF,EACb,mBAAoB,CAClB,KAAM,GACN,QAAS,CACP,2BAA4B,CAC1B,MAAO,GACR,CACF,CACF,CACL,EAGEE,EAAO,IAAI,CAAE,IAAK,yBAA0B,KAAM,aAAc,EC/EhE,SAAS,cAAc,YAAY,EAAE,iBAAiB,QAAS,IAAM,CACnE,OAAO,MAAK,CAChB,CAAG,EAED,OAAO,UAAYF"}